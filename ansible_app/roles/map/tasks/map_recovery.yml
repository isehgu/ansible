---
- name: Check MAP container status
  shell: docker ps | grep {{prefix}}_
  register: map_container_result
  ignore_errors: True
  changed_when: False

#- debug: var=map_container_result

- name: Start map container if needed
  # This is using start instead of restart because one can't restart a downed container. docker would fail.
  command: chdir=/home/core/tacstack ~/bin/docker-compose -f docker-compose-{{env}}.yml start
  changed_when: False
  when: "map_container_result.stdout.count('{{prefix}}_') < count"
  
- name: Re-check MAP container status
  shell: docker ps | grep {{prefix}}_
  register: map_container_result
  changed_when: False

 
- fail: msg="Not all containers were started successfully"
  when: "map_container_result.stdout.count('{{prefix}}_') < count"

# Port check should be dynamic. For now it's hardcoded to prod ports only
- wait_for: host=0.0.0.0 port=80 timeout=30
  when: env == 'prod'

- wait_for: host=0.0.0.0 port=9001 timeout=30
  when: env == 'prod'

- wait_for: host=0.0.0.0 port=18930 timeout=30
  when: env == 'prod'

- wait_for: host=0.0.0.0 port=18922 timeout=30
  when: env == 'prod'

- wait_for: host=0.0.0.0 port=18906 timeout=30
  when: env == 'prod'

- name: Verify httpd service has started
  command: docker exec tacstack_mapapp{{env}}_1 supervisorctl status httpd
  register: httpd_status
  until: "httpd_status.stdout.count('RUNNING') > 0"
  retries: 10
  delay: 1
  changed_when: false

- name: Cleanup MAP by running MAPJanitor
  command: docker exec tacstack_mapapp{{env}}_1 python /home/bdt/map/src/map_backend_server/MAPJanitor.py
  register: janitor_result
  changed_when: false
  failed_when: "'Cleanup Done!' not in janitor_result.stdout"


- name: Start MAP related services
  command: docker exec tacstack_mapapp{{env}}_1 supervisorctl start map nodejs
  register: map_app_result
  changed_when: False


- fail: msg="One of more MAP app didn't start successfully"
  when: "map_app_result.stdout.count('started') < count"


- name: verify map page loads
  uri: return_content=yes url={{map_prod_url}}
  when: env == 'prod'
  register: map_content
  failed_when: "'<title>MAP</title>' not in map_content.content"
