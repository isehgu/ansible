---
############################################################
# Mismatch
############################################################
- name: Checking for mismatch
  gtsopcon: command="gtsstatus -m" env_number="{{env_number}}"
  register: mismatch_result
  changed_when: False
  # Keep checking 10 times, with 10 seconds intervals until either
  # result count is 0.
  # If result count is not 0, which means some processes are listed
  # then the process can only be Perflogger, or NewsService
  until:  ('SHUTDWN' not in mismatch_result.stdout) and
          ('W_SYNC' not in mismatch_result.stdout) and
          ('INITMON' not in mismatch_result.stdout)

  retries: "{{retries}}"
  delay: 2
  ignore_errors: True

#- debug: msg="Line count is {{gtsstatus_result.stdout_lines|gtsOpconResultCount}}"
# - debug: var=mismatch_result
#   when: mismatch_result|failed
#- debug: msg="{{mismatch_result.stdout_lines|gtsOpconCutFluff|count}}"

# At this point, gtsstatus -m has completed
# We would only check each process listed if the Opcon count is not 0
- name: Fail if mismatch found or SystemMonitor/MonitorStateCalculator might be down
  fail: msg="One or more processes are not in their expected state or SystemMonitor/MonitorStateCalculator might be down!"
  #when: "'PerformanceLogger' not in item and 'NewsService' not in item and gtsstatus_result.stdout_lines|gtsOpconResultCount > 0"
  
  # If gtsstatus -m return result show No SystemMonitor, then we fail right away
  # If SystemMonitor is up, then we check if the task failed.
  # If the task succeeded, then there's no mismatch, and we skip this fail task
  # If the task did fail, then we have to check if listed results are from the excluded processes list
  # if the result has item that is NOT part of the excluded processes list, then it's legit, and we fail
  when: ('No SystemMonitor' in mismatch_result.stderr) or
        ((mismatch_result|failed) and
         (mismatch_result.stdout_lines|gtsOpconCutFluff|hasUniqueListItem(gts_exclude_processes)))

##############################################################

############################################################
# Down 
############################################################
- name: Making sure process shutdown completes
  gtsopcon: command="gtsstatus" env_number="{{env_number}}"
  register: down_result
  changed_when: False
  until: "'SHUTDWN' not in down_result.stdout"
  retries: "{{opcon_stop_retries}}"
  delay: 2
  ignore_errors: True
  when: process_state == 'down'

# - name: Pausing 5 sec to give processes time to come down
#   pause: 5

# This failure would only occur if
# Request to check for down state.
# Either SystemMonitor or MonitorStateCalculator is down.
# If SystemMonitor and MonitorStateCalculator are up, 
# then check to see if item is part of both the always-up process list and exclude process list.
# If it's not, then it should be down. So we check it's expected state.
# If expected state is down, then it's down. PLease keep in mind,
# at this point, expected state == current state, otherwise mismatch-check
# would have already caught that.
- name: Fail if processes are not down or SystemMonitor/MonitorStateCalculator might be down
  fail: msg="Processes might NOT be down or SystemMonitor/MonitorStateCalculator might be down!"
  when: (process_state == 'down') and 
        (('No SystemMonitor' in down_result.stdout) or
         ((not item|containListItem(gts_always_up_processes)) and (not item|containListItem(gts_exclude_processes))) and
         (item.split().2 != 'DOWN'))
  with_items:
    - "{{down_result.stdout_lines|default([])|gtsOpconCutFluff}}"

##############################################################
############################################################
# Up
############################################################
- name: Making sure process startup completes
  gtsopcon: command="gtsstatus" env_number="{{env_number}}"
  register: up_result
  changed_when: False
  until: ('INITMON' not in up_result.stdout) and
          ('W_SYNC' not in up_result.stdout)
  retries: "{{opcon_start_retries}}"
  delay: 2
  ignore_errors: True
  when: process_state == 'up'

# - name: Pausing 5 sec to give processes time to come down
#   pause: 5

- name: Fail if processes are not up or SystemMonitor/MonitorStateCalculator might be down
  fail: msg="Processes might NOT be up or SystemMonitor/MonitorStateCalculator might be down!"
  when: (process_state == 'up') and
        (('No SystemMonitor' in up_result.stdout) or
         ((not item|containListItem(gts_exclude_processes)) and
          (item.split().2 != 'RUNNING')))
  with_items:
    - "{{up_result.stdout_lines|default([])|gtsOpconCutFluff}}"
        
#############################################################

