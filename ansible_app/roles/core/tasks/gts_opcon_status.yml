---
############################################################
# Mismatch
############################################################
- name: Checking for mismatch
  gtsopcon: command="gtsstatus -m" env_number="{{env_number}}"
  register: mismatch_result
  changed_when: False
  # Keep checking 10 times, with 10 seconds intervals until either
  # result count is 0.
  # If result count is not 0, which means some processes are listed
  # then the process can only be Perflogger, or NewsService
  until: "mismatch_result.stdout_lines|gtsOpconResultCount == 0"
  retries: 2
  delay: 1
  ignore_errors: True

#- debug: msg="Line count is {{gtsstatus_result.stdout_lines|gtsOpconResultCount}}"
- debug: var=mismatch_result
  when: mismatch_result|failed
#- debug: msg="{{mismatch_result.stdout_lines|gtsOpconCutFluff|count}}"

# At this point, gtsstatus -m has completed
# We would only check each process listed if the Opcon count is not 0
- name: Fail if mismatch found
  fail: msg="One or more processes are not in their expected state"
  #when: "'PerformanceLogger' not in item and 'NewsService' not in item and gtsstatus_result.stdout_lines|gtsOpconResultCount > 0"
  
  # If gtsstatus -m return result show No SystemMonitor, then we fail right away
  # If SystemMonitor is up, then we check if the task failed.
  # If the task succeeded, then there's no mismatch, and we skip this fail task
  # If the task did fail, then we have to check if listed results are from the excluded processes list
  # if the result has item that is NOT part of the excluded processes list, then it's legit, and we fail
  when: ('No SystemMonitor' in mismatch_result.stderr) or
        ((mismatch_result|failed) and
        (mismatch_result.stdout_lines|gtsOpconCutFluff|hasUniqueListItem(gts_exclude_processes)))
# ##############################################################

# ############################################################
# # Down -- Process are only verified 'down' if
# # 1. No mismatch is found -- Since mismatch is the first to run,
# # any failure would've stopped the playbook from getting here.
# # 2. The word 'DOWN' is in stdout. This means the processes
# # that are expected to be down, is down. Any runnning process
# # is irrelevant, since they are expected to be running.
# # i.e. jboss, scheduler, SystemMonitor
# # 3. No line containing -- 'No SystemMonitor'
# ############################################################
# - name: Making sure process shutdown completes
#   gtsopcon: command="gtsstatus" env_number="{{env_number}}"
#   register: down_result
#   changed_when: False
#   until: "'SHUTDWN' not in down_result.stdout"
#   retries: 10
#   delay: 2
#   ignore_errors: True
#   when: process_state == 'down'

# # - name: Pausing 5 sec to give processes time to come down
# #   pause: 5

# - name: Fail if processes are not down
#   fail: msg="Processes might NOT be down!"
#   when: (process_state == 'down') and 
#         ('No SystemMonitor' in down_result.stdout) and
#         (item not in gts_always_up_processes) and
#         # Expected state is down
#         (item.split().3 == 'DOWN')
#   with_items:
#     - "{{down_result.stdout_lines|gtsOpconCutFluff}}"

##############################################################
############################################################
# Up
############################################################
- name: Making sure process startup completes
  gtsopcon: command="gtsstatus" env_number="{{env_number}}"
  register: up_result
  changed_when: False
  until: ('INITMON' not in up_result.stdout) and
          ('W_SYNC' not in up_result.stdout)
  retries: 10
  delay: 2
  ignore_errors: True
  when: process_state == 'up'

# - name: Pausing 5 sec to give processes time to come down
#   pause: 5

- name: Fail if processes are not running
  fail: msg="Processes might NOT be running!"
  when: (process_state == 'up') and
        (('No SystemMonitor' in up_result.stderr) or
         ((item|isUniqueItem(gts_exclude_processes)) and
          (item.split().2 != 'RUNNING')))
  with_items:
    - "{{up_result.stdout_lines|gtsOpconCutFluff}}"
        
#############################################################

